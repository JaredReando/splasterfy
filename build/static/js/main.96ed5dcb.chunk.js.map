{"version":3,"sources":["api/last_fm/artists.ts","api/last_fm/base_api.ts","pages/App.tsx","serviceWorker.ts","index.tsx"],"names":["Methods","BaseAPI","baseUrl","params","method","url","this","process","REACT_APP_LAST_FM_KEY","fetch","response","json","prefix","Object","keys","map","key","fullKey","length","value","Array","multiValue","singleValue","encodeURIComponent","String","join","queryString","filter","part","Artists","req","a","query","fetchApi","GET_SIMILAR","GET_INFO","SEARCH","useStyles","makeStyles","table","minWidth","input","background","App","classes","artist","useState","setInput","setResponse","getArtistsInfo","artists","console","time","infoPromiseArray","info","getInfo","name","mbid","push","timeEnd","Promise","all","results","className","onSubmit","e","preventDefault","getSimilar","log","similarArtists","similarartists","artistInfo","htmlFor","TextField","variant","type","id","onChange","currentTarget","data-testid","style","display","flexDirection","flexGrow","width","overflow","border","padding","TableContainer","component","Paper","Table","stickyHeader","aria-label","TableHead","TableRow","TableCell","TableBody","i","scope","match","src","image","alt","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.96ed5dcb.chunk.js","sourcesContent":["import { BaseAPI, HTTPQuery } from \"./base_api\";\n\nexport interface Artist {\n    name: string;\n    mbid?: string;\n    match: number;\n    url: string;\n    image: {\"#text\": string, size: string}[];\n    streamable: number;\n}\n\n\ninterface SearchRequest {\n    //no auth required\n    limit?: number;\n    page?: number;\n    artist: string;\n}\n\ninterface SearchResponse {\n    results: {\n        \"opensearch:Query\": {\n            \"#text\": string;\n            role: string;\n            searchTerms: string;\n            startPage: number;\n        },\n        \"opensearch:totalResults\": number;\n        \"opensearch:startIndex\": number;\n        \"opensearch:itemsPerPage\": number;\n        artistmatches: {\n            artist: {\n                name: string;\n                listeners: number;\n                mbid?: string;\n                url: string;\n                streamable: number;\n                image: {\"#text\": string, size: string}[];\n            }\n        },\n        \"@attr\": {\n            for: string;\n        }\n    }\n}\n\ninterface GetSimilarResponse {\n    similarartists: {\n        artist: Artist[]\n    }\n}\n\ninterface GetSimilarRequest {\n    //no auth required\n    limit?: number;\n    artist: string;\n    autocorrect?: 0 | 1;\n    mbid?: string;\n}\n\ninterface GetInfoRequest {\n    //no auth required\n    artist: string;\n    mbid?: string;\n    lang?: string;\n    autocorrect?: 0 | 1;\n    username?: string\n}\n\nexport interface GetInfoResponse {\n    artist: {\n        name: string;\n        mbid?: string;\n        url: string;\n        image: {\"#text\": string, size: string}[];\n        streamable: number;\n        ontour: number;\n        stats: {\n            listeners: number;\n            playcount: number;\n        },\n        similar: {\n            artist: {\n                name: string;\n                url: string;\n                image: {\"#text\": string, size: string}[];\n            }\n\n        },\n        tags: {\n            tag: {name: string; url: string}[];\n        },\n        bio: {\n            links: {\n                link: {\n                    \"#text\": string;\n                    rel: string;\n                    href: string;\n                }\n            },\n            published: string;\n            summary: string;\n            content: string;\n        }\n\n    }\n}\n\nenum Methods {\n    ADD_TAGS = \"artist.addTags\",\n    GET_CORRECTION = \"artist.getCorrection\",\n    GET_INFO = \"artist.getInfo\",\n    GET_SIMILAR = \"artist.getSimilar\",\n    GET_TAGS = \"artist.getTags\",\n    GET_TOP_ALBUMS = \"artist.getTopAlbums\",\n    GET_TOP_TAGS = \"artist.getTopTags\",\n    GET_TOP_TRACKS = \"artist.getTopTracks\",\n    REMOVE_TAG = \"artist.removeTag\",\n    SEARCH = \"artist.search\",\n}\n\nexport class Artists extends BaseAPI {\n\n    async getSimilar(req: GetSimilarRequest): Promise<GetSimilarResponse> {\n        const query = this.queryString(req as unknown as HTTPQuery)\n        return await this.fetchApi<GetSimilarResponse>(query, Methods.GET_SIMILAR)\n    }\n\n    getInfo(req: GetInfoRequest): Promise<GetInfoResponse>{\n        const query = this.queryString(req as unknown as HTTPQuery)\n        return this.fetchApi<GetInfoResponse>(query, Methods.GET_INFO)\n    }\n\n    search(req: SearchRequest): Promise<SearchResponse> {\n        const query = this.queryString(req as unknown as HTTPQuery);\n        return this.fetchApi<SearchResponse>(query, Methods.SEARCH)\n    }\n}","//accept an object with any key names, and with those keys having values of any type, including nested objects\nexport type HTTPQuery = { [key: string]: string | number | null | boolean | Array<string | number | null | boolean> | HTTPQuery }\n\nexport class BaseAPI {\n    private readonly baseUrl: string = \"http://ws.audioscrobbler.com/2.0\"\n\n    protected async fetchApi<T>(params: string, method: string): Promise<T> {\n        const url = this.baseUrl + `?method=${method}&` + params + `&api_key=${process.env.REACT_APP_LAST_FM_KEY}&format=json`\n        const response = await fetch(url);\n        return await response.json()\n    }\n\n    queryString(params: HTTPQuery, prefix: string = ''): string {\n        return Object.keys(params)\n            .map((key) => {\n                const fullKey = prefix + (prefix.length ? `[${key}]` : key);\n                const value = params[key];\n                if (value instanceof Array) {\n                    const multiValue = value.map(singleValue => encodeURIComponent(String(singleValue)))\n                        .join(`&${encodeURIComponent(fullKey)}=`);\n                    return `${encodeURIComponent(fullKey)}=${multiValue}`;\n                }\n                if (value instanceof Object) {\n                    return this.queryString(value as HTTPQuery, fullKey);\n                }\n                return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;\n            })\n            .filter(part => part.length > 0)\n            .join('&');\n    }\n\n}","import React, {useState} from 'react';\nimport './App.css';\nimport { Artist, Artists, GetInfoResponse } from \"../api/last_fm/artists\";\nimport { TextField } from '@material-ui/core'\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n  input: {\n    background: 'white'\n  }\n});\n\n// function createData(name: string) {\n//   return { name };\n// }\n\n// const rows = [\n//   createData('Frozen yoghurt'),\n//   createData('Ice cream sandwich'),\n//   createData('Eclair'),\n//   createData('Cupcake'),\n//   createData('Gingerbread')\n// ];\n\ninterface Detail {\n  bio: {\n    links: any, \n    published: string; \n    summary: string;\n    content: string\n  }\n  image: any;\n  mbid: string;\n  name: string;\n  ontour: string;\n  similar: any;\n  stats: {\n    listeners: string;\n    playcount: string;\n  }\n  streamable: string;\n  tags: {\n    tag: any;\n  }\n  url: string;\n}\n\nfunction App() {\n  const classes = useStyles();\n  const artist = new Artists()\n\n  const [input, setInput] = useState<string>('')\n  const [response, setResponse] = useState<Artist[] | null>(null);\n  const getArtistsInfo = async (artists: Array<Artist>) => {\n    console.time('timer')\n    const infoPromiseArray = []\n    for (const a of artists) {\n      const info: Promise<GetInfoResponse> = artist.getInfo({\n        artist: a.name,\n        mbid: a.mbid,\n      })\n      infoPromiseArray.push(info)\n    }\n    console.timeEnd('timer')\n    console.time('allPromises')\n    const results = await Promise.all(infoPromiseArray)\n    console.timeEnd('allPromises')\n\n    return results\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <form onSubmit={async (e: React.SyntheticEvent<HTMLFormElement>) => {\n          e.preventDefault()\n          const response = await artist.getSimilar({artist: input})\n          // debugger\n          if ('error' in response) {\n            console.log('that artist could not be found, please try another search')\n            return\n          }\n          const { similarartists: {artist:  similarArtists} } = response\n          console.time('form')\n          console.log(similarArtists);\n          if(!similarArtists) {\n            console.log('artists um failed..')\n          }\n          const artistInfo = await getArtistsInfo(similarArtists)\n          console.log('artists info: ', artistInfo)\n          setResponse(similarArtists)\n          console.timeEnd('form')\n        }}>\n          <label htmlFor='artist'>Artist</label>\n          <TextField\n            className={classes.input}\n            variant=\"outlined\"\n            type=\"text\" \n            id=\"artist\"\n            onChange={e => setInput(e.currentTarget.value)}\n            value={input}\n            data-testid=\"artist-search\"\n          />\n          <button type=\"submit\" className=\"App-link\">Search</button>\n        </form>\n      </header>\n        <div style={{\n          display: 'flex', \n          flexDirection: 'column', \n          flexGrow: 1,\n          width: \"100%\",\n          overflow: 'auto', \n          border: '1px solid lightgrey',\n          padding: '20px',\n        }}>\n          {response && (\n              <TableContainer component={Paper}>\n                <Table stickyHeader className={classes.table} aria-label=\"similar-artists\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Artist</TableCell>\n                      <TableCell>Match</TableCell>\n                      <TableCell>Image</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {response.map((artist: any, i: number) => {\n                      return (\n                          <TableRow key={artist.name}>\n                            <TableCell component=\"th\" scope=\"row\">\n                              {artist.name}\n                            </TableCell>\n                            <TableCell component=\"th\" scope=\"row\">\n                              {artist.match}\n                            </TableCell>\n                            <TableCell component=\"th\" scope=\"row\">\n                              <img src={artist.image[0][\"#text\"]} alt={artist.name}/>\n                            </TableCell>\n                          </TableRow>\n                      )\n                    })}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n          )}\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pages/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()"],"sourceRoot":""}